{
  "url": "https://docs.crawl4ai.com/extraction/no-llm-strategies",
  "timestamp": "2025-02-06T13:23:53.913765",
  "html": "<!DOCTYPE html><html lang=\"en\" style=\"scroll-padding-top: 50px;\"><head>\n    \n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <meta name=\"generator\" content=\"mkdocs-1.6.0, mkdocs-terminal-4.4.0\">\n    \n    <meta name=\"description\" content=\"🚀🤖 Crawl4AI, Open-source LLM-Friendly Web Crawler &amp; Scraper\"> \n     \n    \n    <link rel=\"canonical\" href=\"https://docs.crawl4ai.com/extraction/no-llm-strategies/\"><link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"../../img/android-chrome-192x192.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"../../img/android-chrome-512x512.png\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"../../img/apple-touch-icon.png\">\n<link rel=\"shortcut icon\" type=\"image/png\" sizes=\"48x48\" href=\"../../img/favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"../../img/favicon-16x16.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"../../img/favicon-32x32.png\">\n\n\n    \n \n<title>LLM-Free Strategies - Crawl4AI Documentation (v0.4.3bx)</title>\n\n\n<link href=\"../../css/fontawesome/css/fontawesome.min.css\" rel=\"stylesheet\">\n<link href=\"../../css/fontawesome/css/solid.min.css\" rel=\"stylesheet\">\n<link href=\"../../css/normalize.css\" rel=\"stylesheet\">\n<link href=\"../../css/terminal.css\" rel=\"stylesheet\">\n<link href=\"../../css/theme.css\" rel=\"stylesheet\">\n<link href=\"../../css/theme.tile_grid.css\" rel=\"stylesheet\">\n<link href=\"../../css/theme.footer.css\" rel=\"stylesheet\">\n<!-- dark color palette -->\n<link href=\"../../css/palettes/dark.css\" rel=\"stylesheet\">\n\n<!-- page layout -->\n<style>\n/* initially set page layout to a one column grid */\n.terminal-mkdocs-main-grid {\n    display: grid;\n    grid-column-gap: 1.4em;\n    grid-template-columns: auto;\n    grid-template-rows: auto;\n}\n\n/*  \n*   when side navigation is not hidden, use a two column grid.  \n*   if the screen is too narrow, fall back to the initial one column grid layout.\n*   in this case the main content will be placed under the navigation panel. \n*/\n@media only screen and (min-width: 70em) {\n    .terminal-mkdocs-main-grid {\n        grid-template-columns: 4fr 9fr;\n    }\n}</style>\n\n\n\n    \n    <link href=\"../../assets/styles.css\" rel=\"stylesheet\"> \n    <link href=\"../../assets/highlight.css\" rel=\"stylesheet\"> \n    <link href=\"../../assets/dmvendor.css\" rel=\"stylesheet\">  \n    \n    \n\n    \n    <!-- search css support -->\n<link href=\"../../css/search/bootstrap-modal.css\" rel=\"stylesheet\">\n<!-- search scripts -->\n<script>\n    var base_url = \"../..\",\n    shortcuts = \"{}\";\n</script>\n<script src=\"../../js/jquery/jquery-1.10.1.min.js\" defer=\"\"></script>\n<script src=\"../../js/bootstrap/bootstrap.min.js\" defer=\"\"></script>\n<script src=\"../../js/mkdocs/base.js\" defer=\"\"></script>\n    \n    \n    \n    \n    <script src=\"../../assets/highlight.min.js\"></script>\n    \n    <script src=\"../../assets/highlight_init.js\"></script>\n    \n    <script src=\"https://buttons.github.io/buttons.js\"></script>\n    \n    <script src=\"../../search/main.js\"></script>\n    \n\n    \n</head>\n\n<body class=\"terminal\" style=\"\"><div class=\"container\">\n    <div class=\"terminal-nav\">\n        <header class=\"terminal-logo\">\n            <div id=\"mkdocs-terminal-site-name\" class=\"logo terminal-prompt\"><a href=\"https://docs.crawl4ai.com/\" class=\"no-style\">Crawl4AI Documentation (v0.4.3bx)</a></div>\n        </header>\n        \n        <nav class=\"terminal-menu\">\n            \n            <ul vocab=\"https://schema.org/\" typeof=\"BreadcrumbList\">\n                \n                \n                <li property=\"itemListElement\" typeof=\"ListItem\">\n                    <a href=\"../..\" class=\"menu-item \" property=\"item\" typeof=\"WebPage\">\n                        <span property=\"name\">Home</span>\n                    </a>\n                    <meta property=\"position\" content=\"0\">\n                </li>\n                \n                \n                \n                \n                <li property=\"itemListElement\" typeof=\"ListItem\">\n                    <a href=\"../../core/quickstart/\" class=\"menu-item \" property=\"item\" typeof=\"WebPage\">\n                        <span property=\"name\">Quick Start</span>\n                    </a>\n                    <meta property=\"position\" content=\"1\">\n                </li>\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                    \n                    \n\n\n<li property=\"itemListElement\" typeof=\"ListItem\">\n    <a href=\"#\" class=\"menu-item\" data-toggle=\"modal\" data-target=\"#mkdocs_search_modal\" property=\"item\" typeof=\"SearchAction\">\n        <i aria-hidden=\"true\" class=\"fa fa-search\"></i> <span property=\"name\">Search</span>\n    </a>\n    <meta property=\"position\" content=\"2\">\n</li>\n                    \n            </ul>\n            \n        </nav>\n    </div>\n</div>\n        \n    <div class=\"container\">\n        <div class=\"terminal-mkdocs-main-grid\"><aside id=\"terminal-mkdocs-side-panel\"><nav>\n  \n    <ul class=\"terminal-mkdocs-side-nav-items\">\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../..\">Home</a>\n        \n    \n    \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        \n            \n            \n            <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item terminal-mkdocs-side-nav-section-no-index\">Setup &amp; Installation</span>\n        \n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/installation/\">Installation</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/docker-deploymeny/\">Docker Deployment</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/quickstart/\">Quick Start</a>\n        \n    \n    \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        \n            \n            \n            <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item terminal-mkdocs-side-nav-section-no-index\">Blog &amp; Changelog</span>\n        \n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../blog/\">Blog Home</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"https://github.com/unclecode/crawl4ai/blob/main/CHANGELOG.md\">Changelog</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        \n            \n            \n            <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item terminal-mkdocs-side-nav-section-no-index\">Core</span>\n        \n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/simple-crawling/\">Simple Crawling</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/crawler-result/\">Crawler Result</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/browser-crawler-config/\">Browser &amp; Crawler Config</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/markdown-generation/\">Markdown Generation</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/fit-markdown/\">Fit Markdown</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/page-interaction/\">Page Interaction</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/content-selection/\">Content Selection</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/cache-modes/\">Cache Modes</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/local-files/\">Local Files &amp; Raw HTML</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../core/link-media/\">Link &amp; Media</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        \n            \n            \n            <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item terminal-mkdocs-side-nav-section-no-index\">Advanced</span>\n        \n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/advanced-features/\">Overview</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/file-downloading/\">File Downloading</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/lazy-loading/\">Lazy Loading</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/hooks-auth/\">Hooks &amp; Auth</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/proxy-security/\">Proxy &amp; Security</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/session-management/\">Session Management</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/multi-url-crawling/\">Multi-URL Crawling</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/crawl-dispatcher/\">Crawl Dispatcher</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/identity-based-crawling/\">Identity Based Crawling</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../advanced/ssl-certificate/\">SSL Certificate</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item--active terminal-mkdocs-side-nav-section-no-index\">Extraction</span>\n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        <span class=\"\n\n    terminal-mkdocs-side-nav-item--active\">LLM-Free Strategies</span>\n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../llm-strategies/\">LLM Strategies</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../clustring-strategies/\">Clustering Strategies</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../chunking/\">Chunking</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n          \n\n\n\n<li class=\"terminal-mkdocs-side-nav-li\">\n    \n    \n        \n        \n\n        \n            \n    \n        \n        \n            \n            \n            <span class=\"\n        \n    \n\n    terminal-mkdocs-side-nav-item terminal-mkdocs-side-nav-section-no-index\">API Reference</span>\n        \n    \n    \n        \n      \n        \n            <ul class=\"terminal-mkdocs-side-nav-li-ul\">\n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/async-webcrawler/\">AsyncWebCrawler</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/arun/\">arun()</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/arun_many/\">arun_many()</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/parameters/\">Browser &amp; Crawler Config</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/crawl-result/\">CrawlResult</a>\n        \n    \n    </li>\n            \n        \n            \n            \n\n             \n                <li class=\"terminal-mkdocs-side-nav-li-ul-li\">\n    \n        \n        \n            <a class=\"\n\n    terminal-mkdocs-side-nav-item\" href=\"../../api/strategies/\">Strategies</a>\n        \n    \n    </li>\n            \n            \n    </ul>\n        \n    \n  </li>\n        \n    </ul>\n  \n</nav><hr>\n<nav>\n    <ul>\n        <li><a href=\"#extracting-json-no-llm\">Extracting JSON (No LLM)</a></li>\n        <li><a href=\"#1-intro-to-schema-based-extraction\">1. Intro to Schema-Based Extraction</a></li><li><a href=\"#2-simple-example-crypto-prices\">2. Simple Example: Crypto Prices</a></li><li><a href=\"#3-advanced-schema-nested-structures\">3. Advanced Schema &amp; Nested Structures</a></li><li><a href=\"#4-why-no-llm-is-often-better\">4. Why “No LLM” Is Often Better</a></li><li><a href=\"#5-base-element-attributes-additional-fields\">5. Base Element Attributes &amp; Additional Fields</a></li><li><a href=\"#6-putting-it-all-together-larger-example\">6. Putting It All Together: Larger Example</a></li><li><a href=\"#7-tips-best-practices\">7. Tips &amp; Best Practices</a></li><li><a href=\"#8-schema-generation-utility\">8. Schema Generation Utility</a></li><li><a href=\"#9-conclusion\">9. Conclusion</a></li>\n    </ul>\n</nav>\n</aside>\n            <main id=\"terminal-mkdocs-main-content\">\n<section id=\"mkdocs-terminal-content\">\n    <h1 id=\"extracting-json-no-llm\">Extracting JSON (No LLM)</h1>\n<p>One of Crawl4AI’s <strong>most powerful</strong> features is extracting <strong>structured JSON</strong> from websites <strong>without</strong> relying on large language models. By defining a <strong>schema</strong> with CSS or XPath selectors, you can extract data instantly—even from complex or nested HTML structures—without the cost, latency, or environmental impact of an LLM.</p>\n<p><strong>Why avoid LLM for basic extractions?</strong></p>\n<p>1. <strong>Faster &amp; Cheaper</strong>: No API calls or GPU overhead.<br>\n2. <strong>Lower Carbon Footprint</strong>: LLM inference can be energy-intensive. A well-defined schema is practically carbon-free.<br>\n3. <strong>Precise &amp; Repeatable</strong>: CSS/XPath selectors do exactly what you specify. LLM outputs can vary or hallucinate.<br>\n4. <strong>Scales Readily</strong>: For thousands of pages, schema-based extraction runs quickly and in parallel.</p>\n<p>Below, we’ll explore how to craft these schemas and use them with <strong>JsonCssExtractionStrategy</strong> (or <strong>JsonXPathExtractionStrategy</strong> if you prefer XPath). We’ll also highlight advanced features like <strong>nested fields</strong> and <strong>base element attributes</strong>.</p>\n<hr>\n<h2 id=\"1-intro-to-schema-based-extraction\">1. Intro to Schema-Based Extraction</h2>\n<p>A schema defines:</p>\n<ol>\n<li>A <strong>base selector</strong> that identifies each “container” element on the page (e.g., a product row, a blog post card).<br>\n2. <strong>Fields</strong> describing which CSS/XPath selectors to use for each piece of data you want to capture (text, attribute, HTML block, etc.).<br>\n3. <strong>Nested</strong> or <strong>list</strong> types for repeated or hierarchical structures.  </li>\n</ol>\n<p>For example, if you have a list of products, each one might have a name, price, reviews, and “related products.” This approach is faster and more reliable than an LLM for consistent, structured pages.</p>\n<hr>\n<h2 id=\"2-simple-example-crypto-prices\">2. Simple Example: Crypto Prices</h2>\n<p>Let’s begin with a <strong>simple</strong> schema-based extraction using the <code>JsonCssExtractionStrategy</code>. Below is a snippet that extracts cryptocurrency prices from a site (similar to the legacy Coinbase example). Notice we <strong>don’t</strong> call any LLM:</p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> crawl4ai <span class=\"hljs-keyword\">import</span> AsyncWebCrawler, CrawlerRunConfig, CacheMode\n<span class=\"hljs-keyword\">from</span> crawl4ai.extraction_strategy <span class=\"hljs-keyword\">import</span> JsonCssExtractionStrategy\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_crypto_prices</span>():\n    <span class=\"hljs-comment\"># 1. Define a simple extraction schema</span>\n    schema = {\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Crypto Prices\"</span>,\n        <span class=\"hljs-string\">\"baseSelector\"</span>: <span class=\"hljs-string\">\"div.crypto-row\"</span>,    <span class=\"hljs-comment\"># Repeated elements</span>\n        <span class=\"hljs-string\">\"fields\"</span>: [\n            {\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"coin_name\"</span>,\n                <span class=\"hljs-string\">\"selector\"</span>: <span class=\"hljs-string\">\"h2.coin-name\"</span>,\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>\n            },\n            {\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"price\"</span>,\n                <span class=\"hljs-string\">\"selector\"</span>: <span class=\"hljs-string\">\"span.coin-price\"</span>,\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>\n            }\n        ]\n    }\n\n    <span class=\"hljs-comment\"># 2. Create the extraction strategy</span>\n    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=<span class=\"hljs-literal\">True</span>)\n\n    <span class=\"hljs-comment\"># 3. Set up your crawler config (if needed)</span>\n    config = CrawlerRunConfig(\n        <span class=\"hljs-comment\"># e.g., pass js_code or wait_for if the page is dynamic</span>\n        <span class=\"hljs-comment\"># wait_for=\"css:.crypto-row:nth-child(20)\"</span>\n        cache_mode = CacheMode.BYPASS,\n        extraction_strategy=extraction_strategy,\n    )\n\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> AsyncWebCrawler(verbose=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-keyword\">as</span> crawler:\n        <span class=\"hljs-comment\"># 4. Run the crawl and extraction</span>\n        result = <span class=\"hljs-keyword\">await</span> crawler.arun(\n            url=<span class=\"hljs-string\">\"https://example.com/crypto-prices\"</span>,\n\n            config=config\n        )\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> result.success:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Crawl failed:\"</span>, result.error_message)\n            <span class=\"hljs-keyword\">return</span>\n\n        <span class=\"hljs-comment\"># 5. Parse the extracted JSON</span>\n        data = json.loads(result.extracted_content)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Extracted <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(data)}</span> coin entries\"</span>)\n        <span class=\"hljs-built_in\">print</span>(json.dumps(data[<span class=\"hljs-number\">0</span>], indent=<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">if</span> data <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"No data found\"</span>)\n\nasyncio.run(extract_crypto_prices())\n</code></pre></div>\n<p><strong>Highlights</strong>:</p>\n<ul>\n<li><strong><code>baseSelector</code></strong>: Tells us where each “item” (crypto row) is.  </li>\n<li><strong><code>fields</code></strong>: Two fields (<code>coin_name</code>, <code>price</code>) using simple CSS selectors.  </li>\n<li>Each field defines a <strong><code>type</code></strong> (e.g., <code>text</code>, <code>attribute</code>, <code>html</code>, <code>regex</code>, etc.).</li>\n</ul>\n<p>No LLM is needed, and the performance is <strong>near-instant</strong> for hundreds or thousands of items.</p>\n<hr>\n<h3 id=\"xpath-example-with-raw-html\"><strong>XPath Example with <code>raw://</code> HTML</strong></h3>\n<p>Below is a short example demonstrating <strong>XPath</strong> extraction plus the <strong><code>raw://</code></strong> scheme. We’ll pass a <strong>dummy HTML</strong> directly (no network request) and define the extraction strategy in <code>CrawlerRunConfig</code>.</p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> crawl4ai <span class=\"hljs-keyword\">import</span> AsyncWebCrawler, CrawlerRunConfig\n<span class=\"hljs-keyword\">from</span> crawl4ai.extraction_strategy <span class=\"hljs-keyword\">import</span> JsonXPathExtractionStrategy\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_crypto_prices_xpath</span>():\n    <span class=\"hljs-comment\"># 1. Minimal dummy HTML with some repeating rows</span>\n    dummy_html = <span class=\"hljs-string\">\"\"\"\n    &lt;html&gt;\n      &lt;body&gt;\n        &lt;div class='crypto-row'&gt;\n          &lt;h2 class='coin-name'&gt;Bitcoin&lt;/h2&gt;\n          &lt;span class='coin-price'&gt;$28,000&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class='crypto-row'&gt;\n          &lt;h2 class='coin-name'&gt;Ethereum&lt;/h2&gt;\n          &lt;span class='coin-price'&gt;$1,800&lt;/span&gt;\n        &lt;/div&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"</span>\n\n    <span class=\"hljs-comment\"># 2. Define the JSON schema (XPath version)</span>\n    schema = {\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Crypto Prices via XPath\"</span>,\n        <span class=\"hljs-string\">\"baseSelector\"</span>: <span class=\"hljs-string\">\"//div[@class='crypto-row']\"</span>,\n        <span class=\"hljs-string\">\"fields\"</span>: [\n            {\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"coin_name\"</span>,\n                <span class=\"hljs-string\">\"selector\"</span>: <span class=\"hljs-string\">\".//h2[@class='coin-name']\"</span>,\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>\n            },\n            {\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"price\"</span>,\n                <span class=\"hljs-string\">\"selector\"</span>: <span class=\"hljs-string\">\".//span[@class='coin-price']\"</span>,\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span>\n            }\n        ]\n    }\n\n    <span class=\"hljs-comment\"># 3. Place the strategy in the CrawlerRunConfig</span>\n    config = CrawlerRunConfig(\n        extraction_strategy=JsonXPathExtractionStrategy(schema, verbose=<span class=\"hljs-literal\">True</span>)\n    )\n\n    <span class=\"hljs-comment\"># 4. Use raw:// scheme to pass dummy_html directly</span>\n    raw_url = <span class=\"hljs-string\">f\"raw://<span class=\"hljs-subst\">{dummy_html}</span>\"</span>\n\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> AsyncWebCrawler(verbose=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-keyword\">as</span> crawler:\n        result = <span class=\"hljs-keyword\">await</span> crawler.arun(\n            url=raw_url,\n            config=config\n        )\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> result.success:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Crawl failed:\"</span>, result.error_message)\n            <span class=\"hljs-keyword\">return</span>\n\n        data = json.loads(result.extracted_content)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Extracted <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(data)}</span> coin rows\"</span>)\n        <span class=\"hljs-keyword\">if</span> data:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"First item:\"</span>, data[<span class=\"hljs-number\">0</span>])\n\nasyncio.run(extract_crypto_prices_xpath())\n</code></pre></div>\n<p><strong>Key Points</strong>:</p>\n<p>1. <strong><code>JsonXPathExtractionStrategy</code></strong> is used instead of <code>JsonCssExtractionStrategy</code>.<br>\n2. <strong><code>baseSelector</code></strong> and each field’s <code>\"selector\"</code> use <strong>XPath</strong> instead of CSS.<br>\n3. <strong><code>raw://</code></strong> lets us pass <code>dummy_html</code> with no real network request—handy for local testing.<br>\n4. Everything (including the extraction strategy) is in <strong><code>CrawlerRunConfig</code></strong>.  </p>\n<p>That’s how you keep the config self-contained, illustrate <strong>XPath</strong> usage, and demonstrate the <strong>raw</strong> scheme for direct HTML input—all while avoiding the old approach of passing <code>extraction_strategy</code> directly to <code>arun()</code>.</p>\n<hr>\n<h2 id=\"3-advanced-schema-nested-structures\">3. Advanced Schema &amp; Nested Structures</h2>\n<p>Real sites often have <strong>nested</strong> or repeated data—like categories containing products, which themselves have a list of reviews or features. For that, we can define <strong>nested</strong> or <strong>list</strong> (and even <strong>nested_list</strong>) fields.</p>\n<h3 id=\"sample-e-commerce-html\">Sample E-Commerce HTML</h3>\n<p>We have a <strong>sample e-commerce</strong> HTML file on GitHub (example):\n</p><div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-bash\">https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\n</code></pre></div>\nThis snippet includes categories, products, features, reviews, and related items. Let’s see how to define a schema that fully captures that structure <strong>without LLM</strong>.<p></p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-graphql\"><span class=\"hljs-keyword\">schema</span> <span class=\"hljs-punctuation\">=</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"E-commerce Product Catalog\"</span>,\n    <span class=\"hljs-string\">\"baseSelector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"div.category\"</span>,\n    <span class=\"hljs-comment\"># (1) We can define optional baseFields if we want to extract attributes </span>\n    <span class=\"hljs-comment\"># from the category container</span>\n    <span class=\"hljs-string\">\"baseFields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"data_cat_id\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"attribute\"</span>, <span class=\"hljs-string\">\"attribute\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"data-cat-id\"</span><span class=\"hljs-punctuation\">}</span>, \n    <span class=\"hljs-punctuation\">]</span>,\n    <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"category_name\"</span>,\n            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"h2.category-name\"</span>,\n            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n        <span class=\"hljs-punctuation\">}</span>,\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"products\"</span>,\n            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"div.product\"</span>,\n            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nested_list\"</span>,    <span class=\"hljs-comment\"># repeated sub-objects</span>\n            <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"name\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"h3.product-name\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                <span class=\"hljs-punctuation\">}</span>,\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"price\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"p.product-price\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                <span class=\"hljs-punctuation\">}</span>,\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"details\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"div.product-details\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nested\"</span>,  <span class=\"hljs-comment\"># single sub-object</span>\n                    <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"brand\"</span>,\n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.brand\"</span>,\n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>,\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"model\"</span>,\n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.model\"</span>,\n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                    <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>,\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"features\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"ul.product-features li\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"list\"</span>,\n                    <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"feature\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span><span class=\"hljs-punctuation\">}</span> \n                    <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>,\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"reviews\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"div.review\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nested_list\"</span>,\n                    <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"reviewer\"</span>, \n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.reviewer\"</span>, \n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>,\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"rating\"</span>, \n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.rating\"</span>, \n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>,\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"comment\"</span>, \n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"p.review-text\"</span>, \n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                    <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>,\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"related_products\"</span>,\n                    <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"ul.related-products li\"</span>,\n                    <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"list\"</span>,\n                    <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"name\"</span>, \n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.related-name\"</span>, \n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>,\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"price\"</span>, \n                            <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.related-price\"</span>, \n                            <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                    <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre></div>\n<p>Key Takeaways:</p>\n<ul>\n<li><strong>Nested vs. List</strong>:  </li>\n<li><strong><code>type: \"nested\"</code></strong> means a <strong>single</strong> sub-object (like <code>details</code>).  </li>\n<li><strong><code>type: \"list\"</code></strong> means multiple items that are <strong>simple</strong> dictionaries or single text fields.  </li>\n<li><strong><code>type: \"nested_list\"</code></strong> means repeated <strong>complex</strong> objects (like <code>products</code> or <code>reviews</code>).</li>\n<li><strong>Base Fields</strong>: We can extract <strong>attributes</strong> from the container element via <code>\"baseFields\"</code>. For instance, <code>\"data_cat_id\"</code> might be <code>data-cat-id=\"elect123\"</code>.  </li>\n<li><strong>Transforms</strong>: We can also define a <code>transform</code> if we want to lower/upper case, strip whitespace, or even run a custom function.</li>\n</ul>\n<h3 id=\"running-the-extraction\">Running the Extraction</h3>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">from</span> crawl4ai <span class=\"hljs-keyword\">import</span> AsyncWebCrawler, CrawlerRunConfig\n<span class=\"hljs-keyword\">from</span> crawl4ai.extraction_strategy <span class=\"hljs-keyword\">import</span> JsonCssExtractionStrategy\n\necommerce_schema = {\n    <span class=\"hljs-comment\"># ... the advanced schema from above ...</span>\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_ecommerce_data</span>():\n    strategy = JsonCssExtractionStrategy(ecommerce_schema, verbose=<span class=\"hljs-literal\">True</span>)\n\n    config = CrawlerRunConfig()\n\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> AsyncWebCrawler(verbose=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-keyword\">as</span> crawler:\n        result = <span class=\"hljs-keyword\">await</span> crawler.arun(\n            url=<span class=\"hljs-string\">\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\"</span>,\n            extraction_strategy=strategy,\n            config=config\n        )\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> result.success:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Crawl failed:\"</span>, result.error_message)\n            <span class=\"hljs-keyword\">return</span>\n\n        <span class=\"hljs-comment\"># Parse the JSON output</span>\n        data = json.loads(result.extracted_content)\n        <span class=\"hljs-built_in\">print</span>(json.dumps(data, indent=<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">if</span> data <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"No data found.\"</span>)\n\nasyncio.run(extract_ecommerce_data())\n</code></pre></div>\n<p>If all goes well, you get a <strong>structured</strong> JSON array with each “category,” containing an array of <code>products</code>. Each product includes <code>details</code>, <code>features</code>, <code>reviews</code>, etc. All of that <strong>without</strong> an LLM.</p>\n<hr>\n<h2 id=\"4-why-no-llm-is-often-better\">4. Why “No LLM” Is Often Better</h2>\n<p>1. <strong>Zero Hallucination</strong>: Schema-based extraction doesn’t guess text. It either finds it or not.<br>\n2. <strong>Guaranteed Structure</strong>: The same schema yields consistent JSON across many pages, so your downstream pipeline can rely on stable keys.<br>\n3. <strong>Speed</strong>: LLM-based extraction can be 10–1000x slower for large-scale crawling.<br>\n4. <strong>Scalable</strong>: Adding or updating a field is a matter of adjusting the schema, not re-tuning a model.</p>\n<p><strong>When might you consider an LLM?</strong> Possibly if the site is extremely unstructured or you want AI summarization. But always try a schema approach first for repeated or consistent data patterns.</p>\n<hr>\n<h2 id=\"5-base-element-attributes-additional-fields\">5. Base Element Attributes &amp; Additional Fields</h2>\n<p>It’s easy to <strong>extract attributes</strong> (like <code>href</code>, <code>src</code>, or <code>data-xxx</code>) from your base or nested elements using:</p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"href\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"attribute\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"attribute\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"href\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre></div>\n<p>You can define them in <strong><code>baseFields</code></strong> (extracted from the main container element) or in each field’s sub-lists. This is especially helpful if you need an item’s link or ID stored in the parent <code>&lt;div&gt;</code>.</p>\n<hr>\n<h2 id=\"6-putting-it-all-together-larger-example\">6. Putting It All Together: Larger Example</h2>\n<p>Consider a blog site. We have a schema that extracts the <strong>URL</strong> from each post card (via <code>baseFields</code> with an <code>\"attribute\": \"href\"</code>), plus the title, date, summary, and author:</p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-graphql\"><span class=\"hljs-keyword\">schema</span> <span class=\"hljs-punctuation\">=</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Blog Posts\"</span>,\n  <span class=\"hljs-string\">\"baseSelector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"a.blog-post-card\"</span>,\n  <span class=\"hljs-string\">\"baseFields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"post_url\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"attribute\"</span>, <span class=\"hljs-string\">\"attribute\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"href\"</span><span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>,\n  <span class=\"hljs-string\">\"fields\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"h2.post-title\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"No Title\"</span><span class=\"hljs-punctuation\">}</span>,\n    <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"date\"</span>, <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"time.post-date\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">}</span>,\n    <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"summary\"</span>, <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"p.post-summary\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">}</span>,\n    <span class=\"hljs-punctuation\">{</span><span class=\"hljs-string\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"author\"</span>, <span class=\"hljs-string\">\"selector\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"span.post-author\"</span>, <span class=\"hljs-string\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"default\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre></div>\n<p>Then run with <code>JsonCssExtractionStrategy(schema)</code> to get an array of blog post objects, each with <code>\"post_url\"</code>, <code>\"title\"</code>, <code>\"date\"</code>, <code>\"summary\"</code>, <code>\"author\"</code>.</p>\n<hr>\n<h2 id=\"7-tips-best-practices\">7. Tips &amp; Best Practices</h2>\n<p>1. <strong>Inspect the DOM</strong> in Chrome DevTools or Firefox’s Inspector to find stable selectors.<br>\n2. <strong>Start Simple</strong>: Verify you can extract a single field. Then add complexity like nested objects or lists.<br>\n3. <strong>Test</strong> your schema on partial HTML or a test page before a big crawl.<br>\n4. <strong>Combine with JS Execution</strong> if the site loads content dynamically. You can pass <code>js_code</code> or <code>wait_for</code> in <code>CrawlerRunConfig</code>.<br>\n5. <strong>Look at Logs</strong> when <code>verbose=True</code>: if your selectors are off or your schema is malformed, it’ll often show warnings.<br>\n6. <strong>Use baseFields</strong> if you need attributes from the container element (e.g., <code>href</code>, <code>data-id</code>), especially for the “parent” item.<br>\n7. <strong>Performance</strong>: For large pages, make sure your selectors are as narrow as possible.</p>\n<hr>\n<h2 id=\"8-schema-generation-utility\">8. Schema Generation Utility</h2>\n<p>While manually crafting schemas is powerful and precise, Crawl4AI now offers a convenient utility to <strong>automatically generate</strong> extraction schemas using LLM. This is particularly useful when:</p>\n<ol>\n<li>You're dealing with a new website structure and want a quick starting point</li>\n<li>You need to extract complex nested data structures</li>\n<li>You want to avoid the learning curve of CSS/XPath selector syntax</li>\n</ol>\n<h3 id=\"using-the-schema-generator\">Using the Schema Generator</h3>\n<p>The schema generator is available as a static method on both <code>JsonCssExtractionStrategy</code> and <code>JsonXPathExtractionStrategy</code>. You can choose between OpenAI's GPT-4 or the open-source Ollama for schema generation:</p>\n<div class=\"highlight\"><pre><span></span><code data-highlighted=\"yes\" class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> crawl4ai.extraction_strategy <span class=\"hljs-keyword\">import</span> JsonCssExtractionStrategy, JsonXPathExtractionStrategy\n\n<span class=\"hljs-comment\"># Sample HTML with product information</span>\nhtml = <span class=\"hljs-string\">\"\"\"\n&lt;div class=\"product-card\"&gt;\n    &lt;h2 class=\"title\"&gt;Gaming Laptop&lt;/h2&gt;\n    &lt;div class=\"price\"&gt;$999.99&lt;/div&gt;\n    &lt;div class=\"specs\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;16GB RAM&lt;/li&gt;\n            &lt;li&gt;1TB SSD&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\"\"\"</span>\n\n<span class=\"hljs-comment\"># Option 1: Using OpenAI (requires API token)</span>\ncss_schema = JsonCssExtractionStrategy.generate_schema(\n    html,\n    schema_type=<span class=\"hljs-string\">\"css\"</span>,  <span class=\"hljs-comment\"># This is the default</span>\n    llm_provider=<span class=\"hljs-string\">\"openai/gpt-4o\"</span>,  <span class=\"hljs-comment\"># Default provider</span>\n    api_token=<span class=\"hljs-string\">\"your-openai-token\"</span>  <span class=\"hljs-comment\"># Required for OpenAI</span>\n)\n\n<span class=\"hljs-comment\"># Option 2: Using Ollama (open source, no token needed)</span>\nxpath_schema = JsonXPathExtractionStrategy.generate_schema(\n    html,\n    schema_type=<span class=\"hljs-string\">\"xpath\"</span>,\n    llm_provider=<span class=\"hljs-string\">\"ollama/llama3.3\"</span>,  <span class=\"hljs-comment\"># Open source alternative</span>\n    api_token=<span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># Not needed for Ollama</span>\n)\n\n<span class=\"hljs-comment\"># Use the generated schema for fast, repeated extractions</span>\nstrategy = JsonCssExtractionStrategy(css_schema)\n</code></pre></div>\n<h3 id=\"llm-provider-options\">LLM Provider Options</h3>\n<ol>\n<li><strong>OpenAI GPT-4 (<code>openai/gpt4o</code>)</strong></li>\n<li>Default provider</li>\n<li>Requires an API token</li>\n<li>Generally provides more accurate schemas</li>\n<li>\n<p>Set via environment variable: <code>OPENAI_API_KEY</code></p>\n</li>\n<li>\n<p><strong>Ollama (<code>ollama/llama3.3</code>)</strong></p>\n</li>\n<li>Open source alternative</li>\n<li>No API token required</li>\n<li>Self-hosted option</li>\n<li>Good for development and testing</li>\n</ol>\n<h3 id=\"benefits-of-schema-generation\">Benefits of Schema Generation</h3>\n<ol>\n<li><strong>One-Time Cost</strong>: While schema generation uses LLM, it's a one-time cost. The generated schema can be reused for unlimited extractions without further LLM calls.</li>\n<li><strong>Smart Pattern Recognition</strong>: The LLM analyzes the HTML structure and identifies common patterns, often producing more robust selectors than manual attempts.</li>\n<li><strong>Automatic Nesting</strong>: Complex nested structures are automatically detected and properly represented in the schema.</li>\n<li><strong>Learning Tool</strong>: The generated schemas serve as excellent examples for learning how to write your own schemas.</li>\n</ol>\n<h3 id=\"best-practices\">Best Practices</h3>\n<ol>\n<li><strong>Review Generated Schemas</strong>: While the generator is smart, always review and test the generated schema before using it in production.</li>\n<li><strong>Provide Representative HTML</strong>: The better your sample HTML represents the overall structure, the more accurate the generated schema will be.</li>\n<li><strong>Consider Both CSS and XPath</strong>: Try both schema types and choose the one that works best for your specific case.</li>\n<li><strong>Cache Generated Schemas</strong>: Since generation uses LLM, save successful schemas for reuse.</li>\n<li><strong>API Token Security</strong>: Never hardcode API tokens. Use environment variables or secure configuration management.</li>\n<li><strong>Choose Provider Wisely</strong>: </li>\n<li>Use OpenAI for production-quality schemas</li>\n<li>Use Ollama for development, testing, or when you need a self-hosted solution</li>\n</ol>\n<p>That's it for <strong>Extracting JSON (No LLM)</strong>! You've seen how schema-based approaches (either CSS or XPath) can handle everything from simple lists to deeply nested product catalogs—instantly, with minimal overhead. Enjoy building robust scrapers that produce consistent, structured JSON for your data pipelines!</p>\n<hr>\n<h2 id=\"9-conclusion\">9. Conclusion</h2>\n<p>With <strong>JsonCssExtractionStrategy</strong> (or <strong>JsonXPathExtractionStrategy</strong>), you can build powerful, <strong>LLM-free</strong> pipelines that:</p>\n<ul>\n<li>Scrape any consistent site for structured data.  </li>\n<li>Support nested objects, repeating lists, or advanced transformations.  </li>\n<li>Scale to thousands of pages quickly and reliably.</li>\n</ul>\n<p><strong>Next Steps</strong>:</p>\n<ul>\n<li>Combine your extracted JSON with advanced filtering or summarization in a second pass if needed.  </li>\n<li>For dynamic pages, combine strategies with <code>js_code</code> or infinite scroll hooking to ensure all content is loaded.</li>\n</ul>\n<p><strong>Remember</strong>: For repeated, structured data, you don’t need to pay for or wait on an LLM. A well-crafted schema plus CSS or XPath gets you the data faster, cleaner, and cheaper—<strong>the real power</strong> of Crawl4AI.</p>\n<p><strong>Last Updated</strong>: 2025-01-01</p>\n<hr>\n<p>That’s it for <strong>Extracting JSON (No LLM)</strong>! You’ve seen how schema-based approaches (either CSS or XPath) can handle everything from simple lists to deeply nested product catalogs—instantly, with minimal overhead. Enjoy building robust scrapers that produce consistent, structured JSON for your data pipelines!</p>\n</section>\n\n            </main>\n        </div>\n        <hr><footer>\n    <div class=\"terminal-mkdocs-footer-grid\">\n        <div id=\"terminal-mkdocs-footer-copyright-info\">\n             Site built with <a href=\"http://www.mkdocs.org\">MkDocs</a> and <a href=\"https://github.com/ntno/mkdocs-terminal\">Terminal for MkDocs</a>.\n        </div>\n    </div>\n</footer>\n    </div>\n\n    \n    <div class=\"modal\" id=\"mkdocs_search_modal\" tabindex=\"-1\" role=\"alertdialog\" aria-modal=\"true\" aria-labelledby=\"searchModalLabel\">\n    <div class=\"modal-dialog modal-lg\" role=\"search\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"searchModalLabel\">Search</h5>\n                <button type=\"button\" class=\"close btn btn-default btn-ghost\" data-dismiss=\"modal\"><span aria-hidden=\"true\">x</span><span class=\"sr-only\">Close</span></button>\n            </div>\n            <div class=\"modal-body\">\n                <p id=\"searchInputLabel\">Type to start searching</p>\n                <form>\n                    <div class=\"form-group\">\n                        <input type=\"search\" class=\"form-control\" aria-labelledby=\"searchInputLabel\" placeholder=\"\" id=\"mkdocs-search-query\" title=\"Please enter search terms here\">\n                    </div>\n                </form>\n                <div id=\"mkdocs-search-results\" data-no-results-text=\"No document matches found\"></div>\n            </div>\n            <div class=\"modal-footer\">\n            </div>\n        </div>\n    </div>\n</div>\n    \n    \n\n\n</body></html>",
  "markdown": "# Extracting JSON (No LLM)\nOne of Crawl4AI’s **most powerful** features is extracting **structured JSON** from websites **without** relying on large language models. By defining a **schema** with CSS or XPath selectors, you can extract data instantly—even from complex or nested HTML structures—without the cost, latency, or environmental impact of an LLM.\n**Why avoid LLM for basic extractions?**\n1. **Faster & Cheaper**: No API calls or GPU overhead. 2. **Lower Carbon Footprint** : LLM inference can be energy-intensive. A well-defined schema is practically carbon-free. 3. **Precise & Repeatable**: CSS/XPath selectors do exactly what you specify. LLM outputs can vary or hallucinate. 4. **Scales Readily** : For thousands of pages, schema-based extraction runs quickly and in parallel.\nBelow, we’ll explore how to craft these schemas and use them with **JsonCssExtractionStrategy** (or **JsonXPathExtractionStrategy** if you prefer XPath). We’ll also highlight advanced features like **nested fields** and **base element attributes**.\n## 1. Intro to Schema-Based Extraction\nA schema defines:\n  1. A **base selector** that identifies each “container” element on the page (e.g., a product row, a blog post card). 2. **Fields** describing which CSS/XPath selectors to use for each piece of data you want to capture (text, attribute, HTML block, etc.). 3. **Nested** or **list** types for repeated or hierarchical structures. \n\n\nFor example, if you have a list of products, each one might have a name, price, reviews, and “related products.” This approach is faster and more reliable than an LLM for consistent, structured pages.\n## 2. Simple Example: Crypto Prices\nLet’s begin with a **simple** schema-based extraction using the `JsonCssExtractionStrategy`. Below is a snippet that extracts cryptocurrency prices from a site (similar to the legacy Coinbase example). Notice we **don’t** call any LLM:\n```\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig, CacheMode\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\nasync def extract_crypto_prices():\n  # 1. Define a simple extraction schema\n  schema = {\n    \"name\": \"Crypto Prices\",\n    \"baseSelector\": \"div.crypto-row\",  # Repeated elements\n    \"fields\": [\n      {\n        \"name\": \"coin_name\",\n        \"selector\": \"h2.coin-name\",\n        \"type\": \"text\"\n      },\n      {\n        \"name\": \"price\",\n        \"selector\": \"span.coin-price\",\n        \"type\": \"text\"\n      }\n    ]\n  }\n  # 2. Create the extraction strategy\n  extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)\n  # 3. Set up your crawler config (if needed)\n  config = CrawlerRunConfig(\n    # e.g., pass js_code or wait_for if the page is dynamic\n    # wait_for=\"css:.crypto-row:nth-child(20)\"\n    cache_mode = CacheMode.BYPASS,\n    extraction_strategy=extraction_strategy,\n  )\n  async with AsyncWebCrawler(verbose=True) as crawler:\n    # 4. Run the crawl and extraction\n    result = await crawler.arun(\n      url=\"https://example.com/crypto-prices\",\n      config=config\n    )\n    if not result.success:\n      print(\"Crawl failed:\", result.error_message)\n      return\n    # 5. Parse the extracted JSON\n    data = json.loads(result.extracted_content)\n    print(f\"Extracted {len(data)} coin entries\")\n    print(json.dumps(data[0], indent=2) if data else \"No data found\")\nasyncio.run(extract_crypto_prices())\n\n```\n\n**Highlights** :\n  * **`baseSelector`**: Tells us where each “item” (crypto row) is.\n  * **`fields`**: Two fields (`coin_name` , `price`) using simple CSS selectors. \n  * Each field defines a **`type`**(e.g.,`text` , `attribute`, `html`, `regex`, etc.).\n\n\nNo LLM is needed, and the performance is **near-instant** for hundreds or thousands of items.\n### **XPath Example with`raw://` HTML**\nBelow is a short example demonstrating **XPath** extraction plus the **`raw://`**scheme. We’ll pass a**dummy HTML** directly (no network request) and define the extraction strategy in `CrawlerRunConfig`.\n```\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig\nfrom crawl4ai.extraction_strategy import JsonXPathExtractionStrategy\nasync def extract_crypto_prices_xpath():\n  # 1. Minimal dummy HTML with some repeating rows\n  dummy_html = \"\"\"\n  <html>\n   <body>\n    <div class='crypto-row'>\n     <h2 class='coin-name'>Bitcoin</h2>\n     <span class='coin-price'>$28,000</span>\n    </div>\n    <div class='crypto-row'>\n     <h2 class='coin-name'>Ethereum</h2>\n     <span class='coin-price'>$1,800</span>\n    </div>\n   </body>\n  </html>\n  \"\"\"\n  # 2. Define the JSON schema (XPath version)\n  schema = {\n    \"name\": \"Crypto Prices via XPath\",\n    \"baseSelector\": \"//div[@class='crypto-row']\",\n    \"fields\": [\n      {\n        \"name\": \"coin_name\",\n        \"selector\": \".//h2[@class='coin-name']\",\n        \"type\": \"text\"\n      },\n      {\n        \"name\": \"price\",\n        \"selector\": \".//span[@class='coin-price']\",\n        \"type\": \"text\"\n      }\n    ]\n  }\n  # 3. Place the strategy in the CrawlerRunConfig\n  config = CrawlerRunConfig(\n    extraction_strategy=JsonXPathExtractionStrategy(schema, verbose=True)\n  )\n  # 4. Use raw:// scheme to pass dummy_html directly\n  raw_url = f\"raw://{dummy_html}\"\n  async with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(\n      url=raw_url,\n      config=config\n    )\n    if not result.success:\n      print(\"Crawl failed:\", result.error_message)\n      return\n    data = json.loads(result.extracted_content)\n    print(f\"Extracted {len(data)} coin rows\")\n    if data:\n      print(\"First item:\", data[0])\nasyncio.run(extract_crypto_prices_xpath())\n\n```\n\n**Key Points** :\n1. **`JsonXPathExtractionStrategy`**is used instead of`JsonCssExtractionStrategy`. 2. **`baseSelector`**and each field’s`\"selector\"` use **XPath** instead of CSS. 3. **`raw://`**lets us pass`dummy_html` with no real network request—handy for local testing. 4. Everything (including the extraction strategy) is in **`CrawlerRunConfig`**.\nThat’s how you keep the config self-contained, illustrate **XPath** usage, and demonstrate the **raw** scheme for direct HTML input—all while avoiding the old approach of passing `extraction_strategy` directly to `arun()`.\n## 3. Advanced Schema & Nested Structures\nReal sites often have **nested** or repeated data—like categories containing products, which themselves have a list of reviews or features. For that, we can define **nested** or **list** (and even **nested_list**) fields.\n### Sample E-Commerce HTML\nWe have a **sample e-commerce** HTML file on GitHub (example): \n```\nhttps://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\n\n```\n\nThis snippet includes categories, products, features, reviews, and related items. Let’s see how to define a schema that fully captures that structure **without LLM**. \n```\nschema = {\n  \"name\": \"E-commerce Product Catalog\",\n  \"baseSelector\": \"div.category\",\n  # (1) We can define optional baseFields if we want to extract attributes \n  # from the category container\n  \"baseFields\": [\n    {\"name\": \"data_cat_id\", \"type\": \"attribute\", \"attribute\": \"data-cat-id\"}, \n  ],\n  \"fields\": [\n    {\n      \"name\": \"category_name\",\n      \"selector\": \"h2.category-name\",\n      \"type\": \"text\"\n    },\n    {\n      \"name\": \"products\",\n      \"selector\": \"div.product\",\n      \"type\": \"nested_list\",  # repeated sub-objects\n      \"fields\": [\n        {\n          \"name\": \"name\",\n          \"selector\": \"h3.product-name\",\n          \"type\": \"text\"\n        },\n        {\n          \"name\": \"price\",\n          \"selector\": \"p.product-price\",\n          \"type\": \"text\"\n        },\n        {\n          \"name\": \"details\",\n          \"selector\": \"div.product-details\",\n          \"type\": \"nested\", # single sub-object\n          \"fields\": [\n            {\n              \"name\": \"brand\",\n              \"selector\": \"span.brand\",\n              \"type\": \"text\"\n            },\n            {\n              \"name\": \"model\",\n              \"selector\": \"span.model\",\n              \"type\": \"text\"\n            }\n          ]\n        },\n        {\n          \"name\": \"features\",\n          \"selector\": \"ul.product-features li\",\n          \"type\": \"list\",\n          \"fields\": [\n            {\"name\": \"feature\", \"type\": \"text\"} \n          ]\n        },\n        {\n          \"name\": \"reviews\",\n          \"selector\": \"div.review\",\n          \"type\": \"nested_list\",\n          \"fields\": [\n            {\n              \"name\": \"reviewer\", \n              \"selector\": \"span.reviewer\", \n              \"type\": \"text\"\n            },\n            {\n              \"name\": \"rating\", \n              \"selector\": \"span.rating\", \n              \"type\": \"text\"\n            },\n            {\n              \"name\": \"comment\", \n              \"selector\": \"p.review-text\", \n              \"type\": \"text\"\n            }\n          ]\n        },\n        {\n          \"name\": \"related_products\",\n          \"selector\": \"ul.related-products li\",\n          \"type\": \"list\",\n          \"fields\": [\n            {\n              \"name\": \"name\", \n              \"selector\": \"span.related-name\", \n              \"type\": \"text\"\n            },\n            {\n              \"name\": \"price\", \n              \"selector\": \"span.related-price\", \n              \"type\": \"text\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n```\n\nKey Takeaways:\n  * **Nested vs. List** : \n  * **`type: \"nested\"`**means a**single** sub-object (like `details`). \n  * **`type: \"list\"`**means multiple items that are**simple** dictionaries or single text fields. \n  * **`type: \"nested_list\"`**means repeated**complex** objects (like `products` or `reviews`).\n  * **Base Fields** : We can extract **attributes** from the container element via `\"baseFields\"`. For instance, `\"data_cat_id\"` might be `data-cat-id=\"elect123\"`. \n  * **Transforms** : We can also define a `transform` if we want to lower/upper case, strip whitespace, or even run a custom function.\n\n\n### Running the Extraction\n```\nimport json\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\necommerce_schema = {\n  # ... the advanced schema from above ...\n}\nasync def extract_ecommerce_data():\n  strategy = JsonCssExtractionStrategy(ecommerce_schema, verbose=True)\n  config = CrawlerRunConfig()\n  async with AsyncWebCrawler(verbose=True) as crawler:\n    result = await crawler.arun(\n      url=\"https://gist.githubusercontent.com/githubusercontent/2d7b8ba3cd8ab6cf3c8da771ddb36878/raw/1ae2f90c6861ce7dd84cc50d3df9920dee5e1fd2/sample_ecommerce.html\",\n      extraction_strategy=strategy,\n      config=config\n    )\n    if not result.success:\n      print(\"Crawl failed:\", result.error_message)\n      return\n    # Parse the JSON output\n    data = json.loads(result.extracted_content)\n    print(json.dumps(data, indent=2) if data else \"No data found.\")\nasyncio.run(extract_ecommerce_data())\n\n```\n\nIf all goes well, you get a **structured** JSON array with each “category,” containing an array of `products`. Each product includes `details`, `features`, `reviews`, etc. All of that **without** an LLM.\n## 4. Why “No LLM” Is Often Better\n1. **Zero Hallucination** : Schema-based extraction doesn’t guess text. It either finds it or not. 2. **Guaranteed Structure** : The same schema yields consistent JSON across many pages, so your downstream pipeline can rely on stable keys. 3. **Speed** : LLM-based extraction can be 10–1000x slower for large-scale crawling. 4. **Scalable** : Adding or updating a field is a matter of adjusting the schema, not re-tuning a model.\n**When might you consider an LLM?** Possibly if the site is extremely unstructured or you want AI summarization. But always try a schema approach first for repeated or consistent data patterns.\n## 5. Base Element Attributes & Additional Fields\nIt’s easy to **extract attributes** (like `href`, `src`, or `data-xxx`) from your base or nested elements using:\n```\n{\n \"name\": \"href\",\n \"type\": \"attribute\",\n \"attribute\": \"href\",\n \"default\": null\n}\n\n```\n\nYou can define them in **`baseFields`**(extracted from the main container element) or in each field’s sub-lists. This is especially helpful if you need an item’s link or ID stored in the parent`<div>`.\n## 6. Putting It All Together: Larger Example\nConsider a blog site. We have a schema that extracts the **URL** from each post card (via `baseFields` with an `\"attribute\": \"href\"`), plus the title, date, summary, and author:\n```\nschema = {\n \"name\": \"Blog Posts\",\n \"baseSelector\": \"a.blog-post-card\",\n \"baseFields\": [\n  {\"name\": \"post_url\", \"type\": \"attribute\", \"attribute\": \"href\"}\n ],\n \"fields\": [\n  {\"name\": \"title\", \"selector\": \"h2.post-title\", \"type\": \"text\", \"default\": \"No Title\"},\n  {\"name\": \"date\", \"selector\": \"time.post-date\", \"type\": \"text\", \"default\": \"\"},\n  {\"name\": \"summary\", \"selector\": \"p.post-summary\", \"type\": \"text\", \"default\": \"\"},\n  {\"name\": \"author\", \"selector\": \"span.post-author\", \"type\": \"text\", \"default\": \"\"}\n ]\n}\n\n```\n\nThen run with `JsonCssExtractionStrategy(schema)` to get an array of blog post objects, each with `\"post_url\"`, `\"title\"`, `\"date\"`, `\"summary\"`, `\"author\"`.\n## 7. Tips & Best Practices\n1. **Inspect the DOM** in Chrome DevTools or Firefox’s Inspector to find stable selectors. 2. **Start Simple** : Verify you can extract a single field. Then add complexity like nested objects or lists. 3. **Test** your schema on partial HTML or a test page before a big crawl. 4. **Combine with JS Execution** if the site loads content dynamically. You can pass `js_code` or `wait_for` in `CrawlerRunConfig`. 5. **Look at Logs** when `verbose=True`: if your selectors are off or your schema is malformed, it’ll often show warnings. 6. **Use baseFields** if you need attributes from the container element (e.g., `href`, `data-id`), especially for the “parent” item. 7. **Performance** : For large pages, make sure your selectors are as narrow as possible.\n## 8. Schema Generation Utility\nWhile manually crafting schemas is powerful and precise, Crawl4AI now offers a convenient utility to **automatically generate** extraction schemas using LLM. This is particularly useful when:\n  1. You're dealing with a new website structure and want a quick starting point\n  2. You need to extract complex nested data structures\n  3. You want to avoid the learning curve of CSS/XPath selector syntax\n\n\n### Using the Schema Generator\nThe schema generator is available as a static method on both `JsonCssExtractionStrategy` and `JsonXPathExtractionStrategy`. You can choose between OpenAI's GPT-4 or the open-source Ollama for schema generation:\n```\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy, JsonXPathExtractionStrategy\n# Sample HTML with product information\nhtml = \"\"\"\n<div class=\"product-card\">\n  <h2 class=\"title\">Gaming Laptop</h2>\n  <div class=\"price\">$999.99</div>\n  <div class=\"specs\">\n    <ul>\n      <li>16GB RAM</li>\n      <li>1TB SSD</li>\n    </ul>\n  </div>\n</div>\n\"\"\"\n# Option 1: Using OpenAI (requires API token)\ncss_schema = JsonCssExtractionStrategy.generate_schema(\n  html,\n  schema_type=\"css\", # This is the default\n  llm_provider=\"openai/gpt-4o\", # Default provider\n  api_token=\"your-openai-token\" # Required for OpenAI\n)\n# Option 2: Using Ollama (open source, no token needed)\nxpath_schema = JsonXPathExtractionStrategy.generate_schema(\n  html,\n  schema_type=\"xpath\",\n  llm_provider=\"ollama/llama3.3\", # Open source alternative\n  api_token=None # Not needed for Ollama\n)\n# Use the generated schema for fast, repeated extractions\nstrategy = JsonCssExtractionStrategy(css_schema)\n\n```\n\n### LLM Provider Options\n  1. **OpenAI GPT-4 (`openai/gpt4o`)**\n  2. Default provider\n  3. Requires an API token\n  4. Generally provides more accurate schemas\n  5. Set via environment variable: `OPENAI_API_KEY`\n  6. **Ollama (`ollama/llama3.3`)**\n  7. Open source alternative\n  8. No API token required\n  9. Self-hosted option\n  10. Good for development and testing\n\n\n### Benefits of Schema Generation\n  1. **One-Time Cost** : While schema generation uses LLM, it's a one-time cost. The generated schema can be reused for unlimited extractions without further LLM calls.\n  2. **Smart Pattern Recognition** : The LLM analyzes the HTML structure and identifies common patterns, often producing more robust selectors than manual attempts.\n  3. **Automatic Nesting** : Complex nested structures are automatically detected and properly represented in the schema.\n  4. **Learning Tool** : The generated schemas serve as excellent examples for learning how to write your own schemas.\n\n\n### Best Practices\n  1. **Review Generated Schemas** : While the generator is smart, always review and test the generated schema before using it in production.\n  2. **Provide Representative HTML** : The better your sample HTML represents the overall structure, the more accurate the generated schema will be.\n  3. **Consider Both CSS and XPath** : Try both schema types and choose the one that works best for your specific case.\n  4. **Cache Generated Schemas** : Since generation uses LLM, save successful schemas for reuse.\n  5. **API Token Security** : Never hardcode API tokens. Use environment variables or secure configuration management.\n  6. **Choose Provider Wisely** : \n  7. Use OpenAI for production-quality schemas\n  8. Use Ollama for development, testing, or when you need a self-hosted solution\n\n\nThat's it for **Extracting JSON (No LLM)**! You've seen how schema-based approaches (either CSS or XPath) can handle everything from simple lists to deeply nested product catalogs—instantly, with minimal overhead. Enjoy building robust scrapers that produce consistent, structured JSON for your data pipelines!\n## 9. Conclusion\nWith **JsonCssExtractionStrategy** (or **JsonXPathExtractionStrategy**), you can build powerful, **LLM-free** pipelines that:\n  * Scrape any consistent site for structured data. \n  * Support nested objects, repeating lists, or advanced transformations. \n  * Scale to thousands of pages quickly and reliably.\n\n\n**Next Steps** :\n  * Combine your extracted JSON with advanced filtering or summarization in a second pass if needed. \n  * For dynamic pages, combine strategies with `js_code` or infinite scroll hooking to ensure all content is loaded.\n\n\n**Remember** : For repeated, structured data, you don’t need to pay for or wait on an LLM. A well-crafted schema plus CSS or XPath gets you the data faster, cleaner, and cheaper—**the real power** of Crawl4AI.\n**Last Updated** : 2025-01-01\nThat’s it for **Extracting JSON (No LLM)**! You’ve seen how schema-based approaches (either CSS or XPath) can handle everything from simple lists to deeply nested product catalogs—instantly, with minimal overhead. Enjoy building robust scrapers that produce consistent, structured JSON for your data pipelines!\n##### Search\nxClose\nType to start searching\n",
  "links": [
    "https://docs.crawl4ai.com",
    "https://docs.crawl4ai.com/advanced/advanced-features",
    "https://docs.crawl4ai.com/advanced/crawl-dispatcher",
    "https://docs.crawl4ai.com/advanced/file-downloading",
    "https://docs.crawl4ai.com/advanced/hooks-auth",
    "https://docs.crawl4ai.com/advanced/identity-based-crawling",
    "https://docs.crawl4ai.com/advanced/lazy-loading",
    "https://docs.crawl4ai.com/advanced/multi-url-crawling",
    "https://docs.crawl4ai.com/advanced/proxy-security",
    "https://docs.crawl4ai.com/advanced/session-management",
    "https://docs.crawl4ai.com/advanced/ssl-certificate",
    "https://docs.crawl4ai.com/api/arun",
    "https://docs.crawl4ai.com/api/arun_many",
    "https://docs.crawl4ai.com/api/async-webcrawler",
    "https://docs.crawl4ai.com/api/crawl-result",
    "https://docs.crawl4ai.com/api/parameters",
    "https://docs.crawl4ai.com/api/strategies",
    "https://docs.crawl4ai.com/blog",
    "https://docs.crawl4ai.com/chunking",
    "https://docs.crawl4ai.com/clustring-strategies",
    "https://docs.crawl4ai.com/core/browser-crawler-config",
    "https://docs.crawl4ai.com/core/cache-modes",
    "https://docs.crawl4ai.com/core/content-selection",
    "https://docs.crawl4ai.com/core/crawler-result",
    "https://docs.crawl4ai.com/core/docker-deploymeny",
    "https://docs.crawl4ai.com/core/fit-markdown",
    "https://docs.crawl4ai.com/core/installation",
    "https://docs.crawl4ai.com/core/link-media",
    "https://docs.crawl4ai.com/core/local-files",
    "https://docs.crawl4ai.com/core/markdown-generation",
    "https://docs.crawl4ai.com/core/page-interaction",
    "https://docs.crawl4ai.com/core/quickstart",
    "https://docs.crawl4ai.com/core/simple-crawling",
    "https://docs.crawl4ai.com/llm-strategies"
  ],
  "depth": 1,
  "stats": {
    "processed": 30,
    "total": 0,
    "depth": 1,
    "elapsed": "0:00:37",
    "page_limit": 34
  }
}